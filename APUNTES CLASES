PROGRAMACION:
DUDAS: 

Clase 1:

DEFINIR VARIABLES:

En c para definir una variable se tiene que definir que tipo de dato va a ser (int, char, etc) por ej:

int numero1;

Para hacer operaciones con decimales, se debe definir a la variable como un 'flotante', poniendo float adelante:

float numero1;

Los tipos de datos son:

int______________________Numero entero (4 bytes)
short int________________Numero entero (2 bytes)
long long________________Numero entero (8 bytes)
float____________________Numero con decimales (4 bytes)
double___________________Numero con decimales (8 bytes)
char_____________________Un carácter (1 byte)
void_____________________Sin tipo 

Los signos a utilizar para realizar operaciones son iguales a los usados en js.

MOSTRAR DATOS:

Para mostrar datos en c, en vez de usar console.log o alert se usa printf:

printf("Introduccion a lenguaje c");

Para concatenar un mensaje, en vez de usar + se usa ,:

printf("El resultado es: %d",resultado); *esa %d hace que la variable a mostrar sea un numero decimal*

Los modificadores de formato para el numero que queremos mostrar son:

%d_______________________Imprime un numero entero
%f_______________________Imprime un numero entero con decimales
%c_______________________Imprime un caracter
%s_______________________Imprime un array de caracteres

INGRESO DE DATOS:

En js para que el usuario pueda ingresar datos se debe usar prompt, pero en c esa funcion no existe. Por lo tanto, se usara un printf para mostrar el mensaje
que el diga al usuario que ingrese datos, y un scanf para poder 'analizar' esa respuesta:

int numero1;
printf("Ingrese un numero: %d",numero1);
scanf(%d, &numero1); *se debe poner el simbolo & delante de la variable, se vera en profundidad porque mas adelante*

Para ingresar una cadena de caracteres, en js teniamos instalado el concepto de 'string' pero en c no esta, por lo tanto deberemos usar un 'array' de caracteres,
que se definira d ela sig manera:

char texto [128]; *char por que son caracteres, y 128 por la cantidad de letras que van a estar dentro del array, se debe definir el maximo*

Cuando debemos 'analizar' un array que ingreso el usuario, debemos poner %s para que sea tomado como una cadena de caracteres:

scanf(%s, texto); *en las variables array no se usa el &*

Y para imprimir lo ingresado por el usuario, se utiliza el printf de la siguiente manera:

printf("Ingresaste el siguiente texto: %s", texto);

OPERACIONES LOGICAS Y CONTROL DE FLUJO:

En c, para juzgar si una variable tiene valor true o false (como era en js), se va a validar si es un 0 o un 1, por ejemplo:


float variableA;
float variableB;
int resultado;
variableA = 3.14;
variableB = 5.5;
resultado = variableA < variableB;
printf("Resultado de la comparación: %d",resultado); *siendo el valor 1, por true*

La sentencia if se sigue utilizando de la misma manera que en java script.

FUNCIONES:

En c, el unico cambio que hay en la ultizacion de funciones, es la manera de declararlas. La única diferencia es que se deben aclarar los tipos de datos
de los argumentos que recibe la función y el tipo de dato del valor que devuelve la función.

Si la funcion no debe devolver ningun argumento, se la debe declarar como void, sacando la palabra function de la sig manera:

void imprimoMensaje(void)
{
	printf("Hola mundo");
}

CLASE 2:

Las sentencias while, if, switch y for son utilizadas de la misma manera que en js.

variable=getch(); *no hace replica en pantalla, pasa a la prox sentencia*
variable=getche(); *hace replica por pantalla*

es como el prompt para solo un caracter

---------------------------------------------

fflush(stdin);

limpia los caracteres en el buffer

cuando pido un caracter por getche/getchar/getch, hacer fflush primero Y DESPUES validar el dato con el while, en el caso de necesitar validarlo.

---------------------------------------------

variable=tolower(); *lo pasa en minuscula*

variable=tolower(getche()); *primero se ejecuta el getche, el usuario ingresa el caracter, pasa por el to lower y lo transforma en minuscula, y lo pasa a la 
variable

variable=toupper(); *lo pasa a mayuscula*

---------------------------------------------

convine usar el for cuando sabemos la cantidad de iteraciones que vamos a tener.


\n SALTO DE LINEA
--------------------------------------------

CLASE 3:

Las funciones son microprogramas que hacen 'algo' con los datos que ingresamos. Los utilizamos cuando tenemos que usar las mismas lineas de codigo varias veces,
por lo tanto, los modularizamos.

Una vez que declaramos una funcion, podemos usar la misma desde otros programas incluyendo la libreria en la que se encuentra '#nombre de la libreria'.

Funciones de caja negra: no podemos ver el interior de la funcion, como hace para realizar la accion.
de caja blanca: de codigo libre, se puede volver a utilizar y modificar.

FUNCION PROTOTIPO 1: RECIBE Y DEVUELVE

int main()
{
    int num1;
    int num2;
    int resultado;

    printf("Ingrese el primer numero ");
    scanf("%d", &num1);

    printf("Ingrese el segundo numero ");
    scanf("%d", &num2);

    resultado=sumar(num1, num2);
    printf("El resultado de la suma es:%d", resultado);
    return 0;
}

int sumar(int numero1, int numero2)
{
    int resultado;
    resultado=numero1 + numero2;
    return resultado;
}

FUNCION TIPO 2: NO RECIBE, NO DEVUELVE

int main()
{
    //CON SEGUNDO TIPO DE FUNCION, SI RECIBE NO DEVUELVE
    int num1;
    int num2;
    int resultado;

    printf("Ingrese el primer numero ");
    scanf("%d", &num1);

    printf("Ingrese el segundo numero ");
    scanf("%d", &num2);

    resultado=sumar(num1, num2);
    return 0;
}
void sumar(int num1, int num2)
{
    int resultado;
    resultado=num1+num2;

    printf("El resultado de la suma es: %d", resultado);
}

FUNCION PROTOTIPO 3: NO RECIBE NI DEVUELVE (DOBLE VOID)

int main()
{
    //PROTOTIPO 3: NO RECIBE NI DEVUELVE
    sumar(); //solo se ejecuta la funcion
    return 0;
}

void sumar(void)
{//se piden todos los datos y se ejecuta todo dentro de la misma
    int num1;
    int num2;
    int resultado;

    printf("Ingrese el primer numero: ");
    scanf("%d", &num1);

    printf("Ingrese el segundo numero: ");
    scanf("%d", &num2);

    resultado=num1+num2;

    printf("El resultado de la suma es: %d" , resultado);
}

FUNCION PROTOTIPO 4:

int sumar(void);

int main()
{
    //PROTOTIPO 3: NO RECIBE NI DEVUELVE
    int resultado;
    sumar();
    printf("El resultado de la suma es: %d", resultado);
    return 0;
}

int sumar(void)
{
    int num1;
    int num2;
    int resultado;

    printf("Ingrese el primer numero: ");
    scanf("%d", &num1);

    printf("Ingrese el segundo numero: ");
    scanf("%d", &num2);

    resultado=num1+num2;

    return resultado;
}

COMO SE HACEN LAS LIBRERIAS:

Se deben crear 2 archivos nuevos oara acompañar al main (en el que ejecutamos nuestro programa):
-un archivo .h:
llevara el prototipo de la funcion (por ej de tipo 1)-> int sumar(int numero1, int numero2)
pueden incluirse varios prototipo de distintas funciones

-un archivo .c:
llevara el desarrollo de toda la funcion (sigue con el ejemplo de arriba)-> 

int sumar(int numero1, int numero2)
{
    int resultado;
    resultado=numero1 + numero2;
    return resultado;
}
Al inicio del archivo tambien se debera documentar que hace esa funcion de la sig manera:
/** \brief |QUE HACE LA FUNCION|
 *
 * \param |PARAMETRO 1 QUE USARA|
 * \param |PARAMETRO 2 QUE USARA|
 * \return |QUE VA A DEVOLVER 0, 1|
 *
 */   

Por ultimo, luego de crear esos 2 archivos, en el archivo main debemos llamar a nuestra biblioteca: #include <stdlib.h> (el nombre
de la biblioteca seria stdlib.h).

CLASE 5 y 6: 
Un vector o array es un conjunto de elementos del mismo tipo (enteros, flotantes, caracteres) que se agrupan bajo un mismo nombre y se diferencian entre sí por un índice.
La forma genérica de declararlo en un programa es la siguiente:
Tipo nombre[cantidad].

ej int vector[5];

Para acceder a cualquier valor del vector debemos especificar su indice, por ej si el vector es de 5 elementos los indices serian:
v[0], v[1], v[2], v[3], v[4];

Hay 2 maneras de cargar elementos dentro de un vector:

-CARGA SECUENCIAL:
Para realizar la carga se necesitaria una estructura de control que puede ser el bucle for.
Un ejemplo de programa que nos permite cargar un vector en forma secuencial es el siguiente:

	#include <stdio.h>
	void main(void)
	{
		int v[5],i;
		for (i=0;i<5;i++)
		{
			printf("Ingrese valor a cargar en el vector");
			scanf("%d",&v[i]);
		}
	}

De esta manera, le damos la indicacion de que en el indice del valor de i, se cargue el numero que ingresaria el usuario.

-CARGA SECUENCIAL:
 Para analizar esto comenzaremos por el caso más simple y dejando que el usuario decida cuando terminar de cargar elementos en el
vector. De acuerdo a esto, como no se sabe cuántos elementos se van a cargar ni en qué orden, debemos primero inicializar todos los 
elementos del vector en un valor conocido que normalmente es cero.
Seguidamente se debe usar un ciclo de control en el cuál la cantidad de iteraciones que se realicen quede fijada por alguna condición 
que acepte el usuario, en este caso el ciclo que más se adecua es el while o do while.
Un ejemplo de programa puede ser el siguiente:

	#include <stdio.h>
	void main(void)
	{
		int v[5],pos,i;
		char seguir;
		for(i=0;i<5;i++)
			v[i]=0; // inicializamos vector
		do
		{
			printf("Ingrese posici¢n");
			scanf("%d",&pos);
			printf("Ingrese valor a cargar en el vector");
			scanf("%d",&v[pos]);
			printf("Desea ingresar otro dato S/N?");
			scanf("%c",&seguir);
		}while(seguir=='s');
	}

La definicion de vectores en paralelo se toma en el sentido de que se utilicen 2 vectores con igual cantidad de elementos, en el cual
se relacionan los datos que se encuentran cargados en cada vector con igual posicion:
legajos[5];
dni[5];

legajos[1]=6;
dni[1]=41063474;

Entonces se veria que para el legajo en la posicion 1 igual a 6, corresponde el dni en la misma posicion.

Para realizar una busqueda de datos en los vectores, se hace lo que se llama como 'burbujeo', en donde se recorre al vector en su totalidad
con un for, y con un if buscamos el dato que queremos hasta que se cumpla la condicion. De la siguiente manera:

	mayor=vec[0];//BUSCA MAYOR
	for(i=0;i<MAX;i++)
	{
		if(vec[i]>mayor)
		{
		mayor=vec[i];
		/* otras asignaciones */
		}
	}
O una busqueda de manera mas general se ejecutaria de la siguiente manera

	flag=0;
	printf("Ingrese numero a buscar");
	scanf("%d",&num);
	for(i=0;i<MAX;i++)
	{
		if(num==vec[i])
		{
			/* asignaciones y modificaciones */
			printf("Se encontro el numero");
			flag=1;
		}
	}
	if(flag==0)
		printf("El numero no se encontro");
		
Ordenamiento del vector
	for(i=0;i<FIL-1;i++)
	{
		for(j=i+1;j<FIL;j++)
		{
			if(vec[i]>vec[j])
			{
				aux=vec[i];
				vec[i]=vec[j];
				vec[j]=aux;
			}
		}
	}
	
CLASE 7:
Strlen nos va a decir cuantos caracteres hay en la cadena
Strlen(cadena); cin libreria string.h

Strcpy sirve para copiar una cadena de caracteres a otra, strcpy(cadenaalaquecopio, cadenayaexistente);

Strcmp para comparar 2 cadenas de caracteres te devuelve 1 si la  cadena estaba antes en el diccionario por alguna letra o 0 cuando son 
iguales o -1 si estaba despues

Stricmp no discrimina si es mayuscula o minuscula

Strcat para concatenar 2 cadenas de caracteres, va de a pares, saca el \0 del final. Para que quede con apellido concateno la primera 
cadena a " " para que me tome el espacio, y ahi concateno esa cadena ya cambiada a la segunda cadena.OJO LA CADENA A LA CONCATENE LA 
SIGUIENTE DEBE TENER EL TAMAÑO SUFICIENTE PARA TENER LA OTRA, LA VARIABLE RECEPTORA DEBERIA TENER POR LO MENOS EL DOBLE DE LA OTRA                        
Matrices: Cada columna es un caracter y cada fila es un nombre. 5 nombres de 20 carac cada uno
Si quiero guardar un nombre en especifico tengo que aclarar el sub indice strcpy(nombres[1], "juan") ponemos en la primera fila ese 
nombre                        
No debo aclarar la columna porque si no estaria pasando un caracter solo

CLASE MIL PUNTEROS:(AGREGAR LAS QUE FALTAN)

PUNTEROS:
puntero es cualquier variable que guarde una direccion de memoria.
nos sirve para cambiar el valor de una variable cuando no estemos en el mismo ambito donde fue declarada, por ej en una funcion.
hay punteros por tipo de dato, ej si declaro un puntero de tipo int solo puedo guardar direccion de memoria de variable tipo int
como declarar un puntero a entero: int* p;
SOLO GUARDA DIRECCION DE MEMORIA
en el printf se muestran las variable puntero como %x
cuando quiero referirme al valor guardado en la direccion de memoria del puntero: uso de nuevo * en frente del nombre del puntero, ej *p me refiero
al valor de la direccion de memoria que tiene p apunta.

ENTONCES:
p==&x PUNTERO P IGUAL A LA DIRECCION DE MEMORIA DE VARIABLE X
*p==x EL VALOR DE LA DIRECCION DE MEMORIA DE X ES IGUAL * P 

se pueden definir de varias maneras los punteros:
r=&x;
r=h;(h siendo otro puntero)
r=01233adnax;(harcodeando la direccion de memoria)

un vector es un puntero en el cual la direccion de memoria cargada es la del vector en la posicion 0.

aritmetica de punteros
vec+1(uno pesa 4 bytes, entonces a la direccion de memoria de 0 le sumo 4 bytes, me corrro a la dire de memoria de 1)
y para hacerlo asi se harua *(vec+1)=10; cargue en la pos 1 del vector, 10 desde puntero

*(vec+1)NOTACION DE PUNTEROS==vec[1]NOTACION VECTORES

CLASE DE PUNTEROS 2:

void* puntero que apunta a cualquier tipo de dato pero es necesario castearlo

trabajar en estatico y dinamico:
hasta ahora, trabajamos en estatico, definiendo el tipo de dato y la variable.

para trabajar en dinamico, vamos a utilizar la funcion malloc, ya en strlib.h 

ej
int x; ªªse reserva espacio en la memoria estatica para la variable x de tipo entero

para trabajar en la memoria dinamica:

int* p; \\declaro una variable puntero de tipo entero para grardar la direcc de memoria

malloc(sizeof(int)); \\va a buscar 4 bytes de memoria, y malloc me a a devolver la direccion de memoria pura donde estos comienzan
void*; \\es lo que devuelve malloc, y este puntero se puede transformar en calqier tipo de dato

p=(int*)malloc(sizeof(int));\\casteo para p 

si no encuentra nada malloc me va a devolver null, osea que no apunta nada, y no se puede utilizar
por eso debmos siempre erificar que sea distinto de null de la siguiente manera:

if(p==null)
{
print("NO SE PUDO RESERVAR EN MEMORIA");
exit(1); \\salida elegante ya que al no encontrar se va a colgar
}

para liberar un puntero, es decir, sacarle la direccion de memoria al puntero que la guardaba:
free(p); \\me libera al puntero p


uso realloc para agrandar elpuntero que ya tenia, doble parametro

realloc(x,sizeof(int)*10); //el puntero que y tenia, y el doble del tamaño, es decir, el que tenia mas el que necesito, si tenia 5 y nec4¡u74esito 5 mas entonces 10

realloc si consigue va a darnos los bytes al costado de los que ya teniamos, si estos estan ocupados, va a reposicionar todo 
los bytes pedidos n otro lugar para que sten todos juntos, y si no hay el suficiente espacio para todos los bytes pedidos 
juntos, entonces deuelve null

cuando usamos realloc no debemos usarlo de la sig manera
x=(int)realloc(x,sizeof(int)*10); 
ya que si hago eso, en el caso de que encuentre espacio, todo junto o lo mude, va a estar todo bien, pero si no encuentra espacio
es decir, devuelve null, nos va a pizar la direccion de nuestro puntero, y los datos dentro de este se pierde

por eso, lo pido con realloc a un auxiliar, y si este es distinto d null, despues lo igualo al que ya tenia, en este caso x


otra funcion es calloc, que le pasamos un array de enteros y el tamaño, y lo inicializa todo en 0

principio de archivos binarios
para abrir estos archios vamos a usar fopen, ya que va a raducir correcamene en el contenido que tengamos en el mismo
todas las funciones van a empezar con f de file
primerao vamos a denominar un puntero de tipo file
FILE* f;

arraylists:

void** solo tiene las direcciones de memoria a las estructuras
odernamiento fisico no loogico
no ocupa el stack





*tema aparte

fscanf(f,"%[^,],%[^,],%[^,],%s\n",
